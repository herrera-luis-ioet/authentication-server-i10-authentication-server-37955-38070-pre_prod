{"is_source_file": true, "format": "Python", "description": "This module provides authentication-related services for the application, including user registration, login, logout, password reset, and email verification.", "external_files": ["app/extensions", "app/models/token", "app/models/user", "app/services/email_service", "app/utils/security"], "external_methods": ["User.find_by_username", "User.find_by_email", "User.find_by_id", "User.verify_password", "User.change_password", "User.unlock_account", "Token.generate_token", "Token.find_valid_token", "Token.revoke_all_user_tokens", "EmailService.send_verification_email", "EmailService.send_password_reset_email", "EmailService.send_account_locked_email"], "published": ["AuthService.register_user", "AuthService.login_user", "AuthService.logout_user", "AuthService.refresh_token", "AuthService.verify_email", "AuthService.request_password_reset", "AuthService.reset_password", "AuthService.change_password", "AuthService.update_profile", "AuthService.generate_api_key", "AuthService.revoke_api_key"], "classes": [{"name": "AuthService", "description": "Service for handling authentication-related operations."}], "methods": [{"name": "Tuple[bool,Union[User,str]] register_user( cls, username: str, email: str, password: str, first_name: Optional[str] = None, last_name: Optional[str] = None, send_verification: bool = True, verification_url_pattern: Optional[str] = None )", "description": "Registers a new user and validates their credentials.", "scope": "AuthService", "scopeKind": "class"}, {"name": "Tuple[bool,Union[Dict,str]] login_user(cls, username_or_email: str, password: str)", "description": "Authenticates a user and generates access and refresh tokens.", "scope": "AuthService", "scopeKind": "class"}, {"name": "bool logout_user(cls, user_id: int, token_value: Optional[str] = None)", "description": "Logs out a user by revoking their tokens.", "scope": "AuthService", "scopeKind": "class"}, {"name": "Tuple[bool,Union[Dict,str]] refresh_token(cls, refresh_token: str)", "description": "Generates a new access token using a refresh token.", "scope": "AuthService", "scopeKind": "class"}, {"name": "Tuple[bool,str] verify_email(cls, token_value: str)", "description": "Verifies a user's email using a verification token.", "scope": "AuthService", "scopeKind": "class"}, {"name": "Tuple[bool,str] request_password_reset( cls, email: str, reset_url_pattern: Optional[str] = None )", "description": "Requests a password reset for a user.", "scope": "AuthService", "scopeKind": "class"}, {"name": "Tuple[bool,str] reset_password(cls, token_value: str, new_password: str)", "description": "Resets a user's password using a reset token.", "scope": "AuthService", "scopeKind": "class"}, {"name": "Tuple[bool,str] change_password( cls, user_id: int, current_password: str, new_password: str )", "description": "Changes a user's password.", "scope": "AuthService", "scopeKind": "class"}, {"name": "Tuple[bool,Union[User,str]] update_profile( cls, user_id: int, first_name: Optional[str] = None, last_name: Optional[str] = None )", "description": "Updates a user's profile information.", "scope": "AuthService", "scopeKind": "class"}, {"name": "Tuple[bool,Union[Dict,str]] generate_api_key(cls, user_id: int, expires_in: Optional[timedelta] = None)", "description": "Generates an API key for a user.", "scope": "AuthService", "scopeKind": "class"}, {"name": "bool revoke_api_key(cls, user_id: int, api_key: str)", "description": "Revokes an API key.", "scope": "AuthService", "scopeKind": "class"}, {"name": "bool _send_account_locked_email(cls, user: User, url_pattern: Optional[str] = None)", "scope": "AuthService", "scopeKind": "class", "description": "unavailable"}, {"name": "bool _send_verification_email(cls, user: User, url_pattern: Optional[str] = None)", "scope": "AuthService", "scopeKind": "class", "description": "unavailable"}], "calls": ["User.find_by_username", "User.find_by_email", "User.verify_password", "User.update_login_failure", "User.update_login_success", "Token.generate_token", "Token.find_valid_token", "Token.revoke_all_user_tokens", "EmailService.send_welcome_email"], "search-terms": ["authentication service", "user registration", "login management", "password reset", "email verification"], "state": 2, "file_id": 17, "knowledge_revision": 39, "git_revision": "", "ctags": [{"_type": "tag", "name": "AuthService", "path": "/home/kavia/workspace/authentication-server-i10-authentication-server-37955-38070-pre_prod/app/services/auth_service.py", "pattern": "/^class AuthService:$/", "language": "Python", "kind": "class"}, {"_type": "tag", "name": "_send_account_locked_email", "path": "/home/kavia/workspace/authentication-server-i10-authentication-server-37955-38070-pre_prod/app/services/auth_service.py", "pattern": "/^    def _send_account_locked_email(cls, user: User, url_pattern: Optional[str] = None) -> bool:$/", "language": "Python", "typeref": "typename:bool", "kind": "member", "signature": "(cls, user: User, url_pattern: Optional[str] = None)", "scope": "AuthService", "scopeKind": "class"}, {"_type": "tag", "name": "_send_verification_email", "path": "/home/kavia/workspace/authentication-server-i10-authentication-server-37955-38070-pre_prod/app/services/auth_service.py", "pattern": "/^    def _send_verification_email(cls, user: User, url_pattern: Optional[str] = None) -> bool:$/", "language": "Python", "typeref": "typename:bool", "kind": "member", "signature": "(cls, user: User, url_pattern: Optional[str] = None)", "scope": "AuthService", "scopeKind": "class"}, {"_type": "tag", "name": "change_password", "path": "/home/kavia/workspace/authentication-server-i10-authentication-server-37955-38070-pre_prod/app/services/auth_service.py", "pattern": "/^    def change_password($/", "language": "Python", "typeref": "typename:Tuple[bool,str]", "kind": "member", "signature": "( cls, user_id: int, current_password: str, new_password: str )", "scope": "AuthService", "scopeKind": "class"}, {"_type": "tag", "name": "generate_api_key", "path": "/home/kavia/workspace/authentication-server-i10-authentication-server-37955-38070-pre_prod/app/services/auth_service.py", "pattern": "/^    def generate_api_key(cls, user_id: int, expires_in: Optional[timedelta] = None) -> Tuple[boo/", "language": "Python", "typeref": "typename:Tuple[bool,Union[Dict,str]]", "kind": "member", "signature": "(cls, user_id: int, expires_in: Optional[timedelta] = None)", "scope": "AuthService", "scopeKind": "class"}, {"_type": "tag", "name": "logger", "path": "/home/kavia/workspace/authentication-server-i10-authentication-server-37955-38070-pre_prod/app/services/auth_service.py", "pattern": "/^logger = logging.getLogger(__name__)$/", "language": "Python", "kind": "variable"}, {"_type": "tag", "name": "login_user", "path": "/home/kavia/workspace/authentication-server-i10-authentication-server-37955-38070-pre_prod/app/services/auth_service.py", "pattern": "/^    def login_user(cls, username_or_email: str, password: str) -> Tuple[bool, Union[Dict, str]]:$/", "language": "Python", "typeref": "typename:Tuple[bool,Union[Dict,str]]", "kind": "member", "signature": "(cls, username_or_email: str, password: str)", "scope": "AuthService", "scopeKind": "class"}, {"_type": "tag", "name": "logout_user", "path": "/home/kavia/workspace/authentication-server-i10-authentication-server-37955-38070-pre_prod/app/services/auth_service.py", "pattern": "/^    def logout_user(cls, user_id: int, token_value: Optional[str] = None) -> bool:$/", "language": "Python", "typeref": "typename:bool", "kind": "member", "signature": "(cls, user_id: int, token_value: Optional[str] = None)", "scope": "AuthService", "scopeKind": "class"}, {"_type": "tag", "name": "refresh_token", "path": "/home/kavia/workspace/authentication-server-i10-authentication-server-37955-38070-pre_prod/app/services/auth_service.py", "pattern": "/^    def refresh_token(cls, refresh_token: str) -> Tuple[bool, Union[Dict, str]]:$/", "language": "Python", "typeref": "typename:Tuple[bool,Union[Dict,str]]", "kind": "member", "signature": "(cls, refresh_token: str)", "scope": "AuthService", "scopeKind": "class"}, {"_type": "tag", "name": "register_user", "path": "/home/kavia/workspace/authentication-server-i10-authentication-server-37955-38070-pre_prod/app/services/auth_service.py", "pattern": "/^    def register_user($/", "language": "Python", "typeref": "typename:Tuple[bool,Union[User,str]]", "kind": "member", "signature": "( cls, username: str, email: str, password: str, first_name: Optional[str] = None, last_name: Optional[str] = None, send_verification: bool = True, verification_url_pattern: Optional[str] = None )", "scope": "AuthService", "scopeKind": "class"}, {"_type": "tag", "name": "request_password_reset", "path": "/home/kavia/workspace/authentication-server-i10-authentication-server-37955-38070-pre_prod/app/services/auth_service.py", "pattern": "/^    def request_password_reset($/", "language": "Python", "typeref": "typename:Tuple[bool,str]", "kind": "member", "signature": "( cls, email: str, reset_url_pattern: Optional[str] = None )", "scope": "AuthService", "scopeKind": "class"}, {"_type": "tag", "name": "reset_password", "path": "/home/kavia/workspace/authentication-server-i10-authentication-server-37955-38070-pre_prod/app/services/auth_service.py", "pattern": "/^    def reset_password(cls, token_value: str, new_password: str) -> Tuple[bool, str]:$/", "language": "Python", "typeref": "typename:Tuple[bool,str]", "kind": "member", "signature": "(cls, token_value: str, new_password: str)", "scope": "AuthService", "scopeKind": "class"}, {"_type": "tag", "name": "revoke_api_key", "path": "/home/kavia/workspace/authentication-server-i10-authentication-server-37955-38070-pre_prod/app/services/auth_service.py", "pattern": "/^    def revoke_api_key(cls, user_id: int, api_key: str) -> bool:$/", "language": "Python", "typeref": "typename:bool", "kind": "member", "signature": "(cls, user_id: int, api_key: str)", "scope": "AuthService", "scopeKind": "class"}, {"_type": "tag", "name": "update_profile", "path": "/home/kavia/workspace/authentication-server-i10-authentication-server-37955-38070-pre_prod/app/services/auth_service.py", "pattern": "/^    def update_profile($/", "language": "Python", "typeref": "typename:Tuple[bool,Union[User,str]]", "kind": "member", "signature": "( cls, user_id: int, first_name: Optional[str] = None, last_name: Optional[str] = None )", "scope": "AuthService", "scopeKind": "class"}, {"_type": "tag", "name": "verify_email", "path": "/home/kavia/workspace/authentication-server-i10-authentication-server-37955-38070-pre_prod/app/services/auth_service.py", "pattern": "/^    def verify_email(cls, token_value: str) -> Tuple[bool, str]:$/", "language": "Python", "typeref": "typename:Tuple[bool,str]", "kind": "member", "signature": "(cls, token_value: str)", "scope": "AuthService", "scopeKind": "class"}], "filename": "/home/kavia/workspace/authentication-server-i10-authentication-server-37955-38070-pre_prod/app/services/auth_service.py", "hash": "4b26e0989e2a08f0b520b066bbeec814", "format-version": 4, "code-base-name": "default", "fields": [{"name": "logger = logging.getLogger(__name__)", "scope": "", "scopeKind": "", "description": "unavailable"}], "revision_history": [{"39": ""}]}